The type of NaN is a number.
The type of null is a object.
The type of array is a object.
Objects can not be compared.
You should use objects when you want the element names to be strings (text).
You should use arrays when you want the element names to be numbers.
All JavaScript objects have a toString() method.

    Methods like call(), and apply() can refer this to any object.
call() and apply() used to call an object method with another object as argument.
bind() method creates a new function that, when called, has its this keyword set to the provided value.

let:
Before ES2015 JavaScript did not have Block Scope.
Variables declared with the let keyword can have Block Scope.
Redeclaring a variable using the var keyword can impose problems. Solution: let
Global variables defined with the var keyword belong to the window object
Global variables defined with the let keyword do not belong to the window object:
    let carName = "Volvo";
    // code here can not use window.carName

Redeclaring a var variable with let, in the same scope, or in the same block, is not allowed and vice versa:
var x = 2;       // Allowed
let x = 3;       // Not allowed
{
  var x = 4;   // Allowed
  let x = 5   // Not allowed
}

Redeclaring a let variable with let, in the same scope, or in the same block, is not allowed:
let x = 2;       // Allowed
let x = 3;       // Not allowed
{
  let x = 4;   // Allowed
  let x = 5;   // Not allowed
}

Using a let variable before it is declared will result in a ReferenceError.
    // you can NOT use carName here
    let carName;

const:
Variables defined with const behave like let variables, except they cannot be reassigned.
It does NOT define a constant value. It defines a constant reference to a value.
Because of this, we cannot change constant primitive values, but we can change the properties of constant objects.
But we can NOT reassign a constant object.
You can change the elements of a constant array,But you can NOT reassign a constant array.

// You can create a const object:
const car = {type:"Fiat", model:"500", color:"white"};
// You can change a property:
car.color = "red";

const PI = 3.141592653589793;
PI = 3.14;      // This will give an error
PI = PI + 10;   // This will also give an error

Redeclaring or reassigning an existing var or let variable to const, in the same scope, or in the same block, is not allowed.
Redeclaring or reassigning an existing const variable, in the same scope, or in the same block, is not allowed.
Redeclaring a variable with const, in another scope, or in another block, is allowed.

The debugger keyword stops the execution of JavaScript, and calls (if available) the debugging function.
This has the same function as setting a breakpoint in the debugger.

Never break a return statement.

Functions:
Hoisting applies to variable declarations and to function declarations.
Because of this, JavaScript functions can be called before they are declared.
avaScript functions have both properties and methods.
The arguments.length property returns the number of arguments received when the function was invoked.
Arrow functions are not hoisted. They must be defined before they are used.
Using const is safer than using var, because a function expression is always constant value.